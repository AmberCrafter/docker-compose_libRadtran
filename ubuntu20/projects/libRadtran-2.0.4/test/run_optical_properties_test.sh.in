#!/bin/bash
#set -eu -o pipefail

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_ROOT="$SCRIPTDIR/../"
EXDIR="${PROJECT_ROOT}/examples"

# Global state vars
ERRORMESSAGE=""
failure=0

function show_help {
  echo "script to run the libRadtran optical properties tests"
  echo "  Usage: run_optical_properties_test.sh [OPTION]"
  echo ""
  echo "  -t, --test        <testname>    run a specific test which matches the given substring"
  echo "  -g, --gen_target                (re-)generate optical properties target against which we check"
  echo "  --databasepath    <dirname>     directory which holds the test target output, e.g. test/libRadtran_test_data"
  echo "  -v, --verbose                   Increase verbosity"
  echo "  -h, --help                      Show this help text and exit"
}

function a_gt_b() {
  awk -v n1="$1" -v n2="$2" 'BEGIN {printf (n1>n2?"1":"0") }'
}

function call_uvspec_and_compare_results
{
  inpstr="$1"
  input="$2"
  target="$3"
  VERBOSE="$4"
  QUIET="$5"
  GEN_OUTPUT="$6"

  LIMIT="1e-7"

  inpfile=`basename $input`
  error=0

  $QUIET || printf '%.68s %s' "$inpfile.................................................................... "
  $VERBOSE && (echo "uvspec run test $input, target $target" >> error_optprop.out)
  cat $input > tmp_optprop.out

  # expected output file
  OUT="test.optical_properties.nc"

  # run uvspec
  BINARY=${PROJECT_ROOT}/bin/uvspec
  $WITH_VALGRIND && BINARY="valgrind $BINARY"
  echo "$inpstr" | ${BINARY} &> tmp.out
  RET=$?

  if [ ! -e "$OUT" ] ; then
    echo "I expected that uvspec would create output file $OUT but it didnt :("
    failure=$(( failure + 1 ))
    cat tmp.out
    ERRORMESSAGE+="ERROR: Test $input failed.\n"
    ERRORMESSAGE+=`cat tmp.out`
    return
  fi

  if [ $RET -ne 0 ]
  then
    failure=$(( failure + 1 ))
    cat tmp.out
    ERRORMESSAGE+="ERROR: Test $input failed.\n"
    ERRORMESSAGE+=`cat tmp.out`
    return
  else
    $GEN_OUTPUT && (cp "$OUT" "$target")
  fi
  cat tmp.out 2>&1 >> tmp_optprop

  $VERBOSE && (echo "Difference in optical properties" >> tmp_optprop.out)

  if [ "@FOUND_NCO@" == "yes" ]; then
    $VERBOSE && (echo "Comparing $OUT to $target with @NCDIFF@")
    # Filter ncdump output to get a list of variables only
    VARS=$(ncdump -h "$OUT" | \
      sed -n '/^variables:/,/^$/p;/^$/q' | \
      awk '{print $2}' | \
      awk -F "(" '{print $1}' | \
      sed 's/\\//g')

    for varname in $VARS
    do
      NCDIFF="tmp.ncdiff"
      @NCDIFF@ --no_tmp_fl -v ${varname} "$OUT" $target -O -o $NCDIFF >> tmp_optprop.out 2>&1
      @NCAP2@ -v --no_tmp_fl -s "${varname}_max_diff=${varname}.fabs().max()" $NCDIFF -O -o $NCDIFF >> tmp_optprop.out 2>&1
      MAXERR=$(ncdump $NCDIFF | grep "${varname}_max_diff = " | awk '{print $3}')
      if (( $(a_gt_b "$MAXERR" "$LIMIT") )); then
        echo "Found serious differences in variable ${varname} with max difference $MAXERR"
        error=$(( error + $? ))
      fi
      rm $NCDIFF
    done
  elif [ "@FOUND_NCCMP@" == "yes" ]; then
    $VERBOSE && (echo "Comparing $OUT to $target with @NCCMP@")
    @NCCMP@ -dmgfb --tolerance=$LIMIT --Tolerance=$LIMIT "$OUT" $target 2>&1 >> tmp_optprop.out
    let error+=$?
  fi

  $VERBOSE && (echo "Number of differences: $error")

  if [ $error -ne 0 ]
  then
    failure=$(( failure + 1 ))
    ( echo -e "\t\t ... failed." && cat tmp_optprop.out ) 2>&1 >> error_optprop.out
    ERRORMESSAGE+="ERROR: Test $input failed.\n"
    $QUIET || (echo " failed.")
  else
    echo -e "\t\t ... ok." 2>&1 >> error_optprop.out
    $QUIET || (echo " ok.")
  fi
  rm $OUT
  rm error_optprop.out
  rm tmp_optprop.out
  rm tmp_optprop
  rm tmp.out
}


# Check Arguments
GEN_OUTPUT=false
QUIET=false
VERBOSE=false
TEST=""
DATABASEPATH="${PROJECT_ROOT}/test/optical_properties_tests/"
WITH_VALGRIND=false

POSITIONAL=()
while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -g|--generate-output)
      GEN_OUTPUT=true
      shift # past argument
      ;;
    -q|--quiet)
      VERBOSE2=true
      shift # past argument
      ;;
    -v|--verbose)
      VERBOSE=true
      shift # past argument
      ;;
    --databasepath)
      DATABASEPATH="$2"
      shift # past argument
      shift # past value
      ;;
    --valgrind)
      WITH_VALGRIND=true
      shift # past argument
      ;;
    -t|--test)
      TEST="$2"
      shift # past argument
      shift # past value
      ;;
    -h|--help)
      shift # past argument
      show_help
      exit 0
      ;;
    *)    # unknown option -- ignore
      shift
      ;;
  esac
done

if $VERBOSE ; then
  echo "Found arguments:"
  echo "--test=$TEST"
  echo "--verbose=$VERBOSE"
  echo "--valgrind=$WITH_VALGRIND"
  echo "--quiet=$QUIET"
  echo "--generate-target=$GEN_OUTPUT"
  echo "--databasepath=$DATABASEPATH"
  echo ""
fi

$VERBOSE && echo "Uvspec run optical properties tests"

$GEN_OUTPUT && ($VERBOSE && echo "Making sure that DATABASEPATH exists... "; mkdir -p $DATABASEPATH)

cd $SCRIPTDIR

for input in ${EXDIR}/test_optical_properties/*.INP;
do
  FILENAME=$(basename ${input%.INP})

  if [[ "${FILENAME}" == *"${TEST}"* ]]
  then
    $VERBOSE && echo "Test ${FILENAME} matches given substring $TEST"
  else
    $VERBOSE && echo "Test ${FILENAME} does not match given substring $TEST"
    continue
fi

[ ! -e "$input" ] && (echo "input filename $input does not exist!"; exit 1)
target=${DATABASEPATH}/${FILENAME%.INP}.OUT.nc
[ ! -e "$target" ] && ($GEN_OUTPUT || (echo "benchmark file $target does not exist!"; exit 1))

inpstr=`cat $input`

call_uvspec_and_compare_results "$inpstr" "$input" "$target" "$VERBOSE" "$QUIET" "$GEN_OUTPUT" "$WITH_VALGRIND"
done


$QUIET || echo "$ERRORMESSAGE"
$QUIET || echo "${failure} optprop tests failed"
exit $failure
